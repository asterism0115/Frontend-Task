{"version":3,"sources":["Card.js","CardHandler.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_style","transform","concat","react_default","a","createElement","dist","play","duration","easeType","keyframes","0","50","100","className","style","Object","objectSpread","src","alt","API_URL","CardHandler","params","_useState","useState","_useState2","slicedToArray","started","setStarted","_useState3","_useState4","cards","setCards","_useState5","_useState6","drawnCards","setDrawnCards","_useState7","_useState8","drawnCard","setDrawnCard","_useState9","_useState10","alertText","setAlertText","_useState11","_useState12","valueMatches","setValueMatches","_useState13","_useState14","suitMatches","setSuitMatches","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","data","total_cards","wrap","_context","prev","next","axios","get","then","_ref","sent","deck_id","e","stop","apply","this","arguments","useEffect","showAlertText","length","value","suit","left","src_Card_0","image","right","onClick","toConsumableArray","slice","fetchData","App","src_CardHandler_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.498f7ed0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\nimport { AnimateKeyframes } from \"react-simple-animate\";\n\nconst Card = (props) => {\n  const _translateX = \"0px\";\n  const _translateY = \"0px\";\n  const _style = {\n    transform: `translate(${_translateX},${_translateY} )`,\n  };\n\n  return (\n    <AnimateKeyframes\n      play={props.play}\n      duration={0.5}\n      easeType=\"cubic-bezier(0.25, 0.46, 0.45, 0.94)\"\n      keyframes={[\n        { 0: \"opacity: 0\" },\n        { 50: \"opacity: 1\", transform: \"translateX(400px)\" },\n        { 100: \"opacity: 1\", transform: `translateX(${_translateX}px)` },\n      ]}\n    >\n      <figure className=\"Card\" style={{ ..._style }}>\n        <img src={props.src} alt={props.alt} />\n      </figure>\n    </AnimateKeyframes>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./CardHandler.css\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nconst CardHandler = (params) => {\n  const [started, setStarted] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [drawnCards, setDrawnCards] = useState([]);\n  const [drawnCard, setDrawnCard] = useState({});\n  const [alertText, setAlertText] = useState(\"\");\n  const [valueMatches, setValueMatches] = useState(0);\n  const [suitMatches, setSuitMatches] = useState(0);\n\n  async function fetchData() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const total_cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    setCards(total_cards);\n    setStarted(true);\n  }\n\n  useEffect(() => {\n    showAlertText();\n  }, [drawnCard]);\n\n  const drawNewCard = () => {\n    if (started) {\n      setDrawnCard(cards[cards.length - 1]);\n      setDrawnCards([...drawnCards, drawnCard]);\n      setCards([...cards.slice(0, -1)]);\n      setAlertText(\"\");\n    } else {\n      fetchData();\n    }\n  };\n\n  const showAlertText = () => {\n    if (cards.length > 0) {\n      if (drawnCard.value === cards[cards.length - 1].value) {\n        setAlertText(\"SNAP VALUE!\");\n        setValueMatches(valueMatches + 1);\n      }\n      if (drawnCard.suit === cards[cards.length - 1].suit) {\n        setAlertText(\"SNAP SUIT!\");\n        setSuitMatches(suitMatches + 1);\n      }\n    }\n  };\n\n  const buttonText = () => {\n    if (cards.length === 0) return \"Draw Card\";\n    else if (cards.length > 0) return `${cards.length} cards left!`;\n  };\n\n  return (\n    <div className=\"CardHandler\">\n      <h1 className=\"CardHandler-title\">Card handler</h1>\n      <h2 className=\"CardHandler-subtitle\">{alertText}</h2>\n\n      <div className=\"CardHandler-deck\">\n        <div className=\"BordCard\" style={{ left: \"50px\" }}>\n          <Card src={drawnCard.image} play={true} />\n        </div>\n        <div className=\"BordCard\" style={{ right: \"50px\" }}>\n          {cards[0] && (\n            <Card src={cards[cards.length - 1].image} play={false} />\n          )}\n        </div>\n      </div>\n\n      {(!started || (started && cards.length > 0)) && (\n        <button className=\"CardHandler-btn\" onClick={drawNewCard}>\n          {buttonText()}\n        </button>\n      )}\n\n      {cards.length === 0 && drawnCards.length !== 0 && (\n        <div>\n          <h2 className=\"CardHandler-subtitle\">\n            VALUE MATCHES: {valueMatches}\n          </h2>\n          <h2 className=\"CardHandler-subtitle\">SUIT MATCHES: {suitMatches}</h2>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CardHandler;\n","import React from \"react\";\nimport CardHandler from \"./CardHandler\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CardHandler />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}